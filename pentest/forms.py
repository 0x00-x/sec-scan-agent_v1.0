#!/usr/bin/env python
#coding:utf-8
#__author__:Bing
#email:amazing_bing@outlook.com

from django import forms
from pentest import models
import time,re


class LoginForm(forms.Form):
    username = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control input-sm',"placeholder":"Please input your username",'required':'required'}),min_length=4,max_length=16,error_messages={'required':u'The username is required not empty'})
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control input-sm',"placeholder":"Please input your password",'required':'required'}),min_length=8,max_length=30,error_messages={'required':u'The password is required not empty'})
    captchas = "create in progress"

    def clean(self):
        '''
        try:
            captcha_x = self.cleaned_data['captchas']
        except Exception as e:
            print 'except:'+str(e)
            raise forms.ValidationError('The captchas are input error!please try again')
        '''
        
        try:
            username = self.cleaned_data['username']
        except Exception as e:
            print 'except:'+str(e)
            raise forms.ValidationError('The username are format error!please try again')
        
        


class RegisterForm(forms.Form):
    username = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control input-sm',"placeholder":"Please input your username",'required':'required'}),min_length=4,max_length=16,error_messages={'required':u'The username is required not empty'})
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control input-sm',"placeholder":"Please input your password",'required':'required'}),min_length=8,max_length=30,error_messages={'required':u'The password is required not empty'})
    password1 = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control input-sm',"placeholder":"Please re-enter password",'required':'required'}),error_messages={'required':u'The password is required not empty'})
    email = forms.EmailField(widget=forms.EmailInput(attrs={'class':'form-control input-sm','placeholder':'Please input your email address','required':'required'}),error_messages={'required':u'The email address is required not empty'})
    phone = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control input-sm','placeholder':'Please input your phone number','required':'required'}),min_length=11,max_length=13,error_messages={'required':u'The phone number is required not empty'},help_text='For Example:13888888888')
    #date_register = str(time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
    
    captchas = "create in progress"

    def clean(self):
        try:
            username = self.cleaned_data['username']
        except:
            pass       
        
        #passwords match apart
        password = self.cleaned_data['password']
        password1 = self.cleaned_data['password1']
        if password != password1:
            raise forms.ValidationError('passwords not match')
        
        #identity email apart    
        try:
            email = self.cleaned_data['email']
        except Exception as e:
            print 'except:'+str(e)
            raise forms.ValidationError('The email address is format error!please try again')
        is_username_exist = models.UserInfo.objects.filter(username=username)
        is_email_exist = models.UserInfo.objects.filter(email=email)
        if is_username_exist:
            raise forms.ValidationError('username registered')
        elif is_email_exist:
            raise forms.ValidationError('email registered')
        else:
            pass
        
        
        #identity phone number apart
        phone = self.cleaned_data['phone']
        pattern = re.compile(r"^((\d{3,4}-)?\d{7,8})$|(1[3-9][0-9]{9})")
        if pattern.match(phone):
            pass
        else:
            raise forms.ValidationError('please correct phone number.')
        
         
            
        return self.cleaned_data


class ResetPwd(forms.Form):
    pwd = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control input-sm',"placeholder":"Please input your old password",'required':'required'}),min_length=8,max_length=30,error_messages={'required':u'The password is required not empty'})
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control input-sm',"placeholder":"Please input your new password",'required':'required'}),min_length=8,max_length=30,error_messages={'required':u'The password is required not empty'})
    password1 = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control input-sm',"placeholder":"Please re-enter password",'required':'required'}),error_messages={'required':u'The password is required not empty'})
    email = forms.EmailField(widget=forms.EmailInput(attrs={'class':'form-control input-sm','placeholder':'Please input your email address','required':'required'}),error_messages={'required':u'The email address is required not empty'})
    captchas = "create in progress"

    def clean(self):
        '''
        try:
            captcha_x = self.cleaned_data['captchas']
        except Exception as e:
            print 'except:'+str(e)
            raise forms.ValidationError('The captchas are input error!please try again')
        '''
        try:
            pwd = self.cleaned_data['pwd']
        except Exception as e:
            print 'except:'+str(e)
            raise forms.ValidationError('Ensure this old password value has at least 8 characters!please try again')
        
        #passwords match apart
        password = self.cleaned_data['password']
        password1 = self.cleaned_data['password1']
        if password != password1:
            raise forms.ValidationError('new passwords not match')
        
        #identity email apart    
        try:
            email = self.cleaned_data['email']
        except Exception as e:
            print 'except:'+str(e)
            raise forms.ValidationError('The email address is format error!please try again')
        

        

class Host(forms.Form):
    hostname = forms.CharField(widget=forms.Textarea(attrs={'class':'form-control',"placeholder":"http://www.baidu.com",'required':'required'}),error_messages={'required':u'The host is required not empty'})
    scan_model = ((0,'all'),(1,'sql'),(2,'xss'),(3,'code excute'),(4,'other'))
    scanmodel = forms.MultipleChoiceField(choices=scan_model,widget=forms.CheckboxSelectMultiple(),error_messages={'required':u"The model is not selected"})
    plugin = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control input-sm',"placeholder":"Please search your plugin,for example:struts,fck,eweb,dicuz,null means select all"}))
    
    #captchas = "create in progress"

    def clean(self):
        try:
            hostname = self.cleaned_data['hostname']
        except:
            pass       
        
        try:
            scanmodel = self.cleaned_data['scanmodel']
        except:
            raise forms.ValidationError("you didn't have choose scan model")

        is_hostname_exist = models.ScanConfig.objects.filter(host=hostname)
        #is_plugin_exist = models.ScanConfig.object.filter(plugin=plugin)
        if is_hostname_exist:
            raise forms.ValidationError('hostname was scaned')
        else:
            pass
        '''
        elif is_email_exist:
            raise forms.ValidationError('email registered')
        else:
            pass
        '''
            
        return self.cleaned_data

