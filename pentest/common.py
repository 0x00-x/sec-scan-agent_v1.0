#!/usr/bin/env python
#coding:utf-8
#__author__:Bing
#email:amazing_bing@outlook.com


from django.shortcuts import render_to_response,HttpResponseRedirect
from django.utils.safestring import mark_safe
from functools import wraps
from pentest import models
import random,hashlib

#auth_required cookie model apart
def auth_required(fun):
    ''' decoration device for identity authentication '''
    @wraps(fun)
    def decorator(request,*args,**kwargs):
        username = request.COOKIES.get('user_name','')
        auth_user = request.COOKIES.get('user_auths','')
        U = models.UserInfo.objects.filter(username=username)
        if username == '' and auth_user == '':
            return auth_fail_handler(request)
        else:
            for item in U:
                values1 = item.user_hash    

        if str(auth_user) == str(values1):
            return fun(request,*args,**kwargs)
        else:
            return auth_fail_handler(request)
    return decorator

def auth_fail_handler(request):
    return HttpResponseRedirect("/")



#password add encrypt
def encrypt(key, s): 
    b = bytearray(str(s).encode("gbk")) 
    n = len(b) # 求出 b 的字节数 
    c = bytearray(n*2) 
    j = 0 
    for i in range(0, n): 
        b1 = b[i] 
        b2 = b1 ^ key # b1 = b2^ key 
        c1 = b2 % 16 
        c2 = b2 // 16 # b2 = c2*16 + c1 
        c1 = c1 + 65 
        c2 = c2 + 65 # c1,c2都是0~15之间的数,加上65就变成了A-P 的字符的编码 
        c[j] = c1 
        c[j+1] = c2 
        j = j+2 
    return c.decode("gbk") 

def decrypt(key, s): 
    c = bytearray(str(s).encode("gbk")) 
    n = len(c) # 计算 b 的字节数 
    if n % 2 != 0 : 
        return "" 
    n = n // 2 
    b = bytearray(n) 
    j = 0 
    for i in range(0, n): 
        c1 = c[j] 
        c2 = c[j+1] 
        j = j+2
        c1 = c1 - 65 
        c2 = c2 - 65 
        b2 = c2*16 + c1 
        b1 = b2^ key 
        b[i]= b1 
    try: 
        return b.decode("gbk") 
    except: 
        return "failed" 

#key = 48 
#s1 = encrypt(key, 'hello worldsdfsdfsdf')
#print len(s1) 
#s2 = decrypt(key, s1) 
#print s1,'\n',s2  


#make a identity user_hash
def user_auth(arg):
    temp = str(arg)
    rand_int = []
    for i in range(1,6):
        rand_int.append(random.choice(['f','d','c','e','!','#','$','@','2','1','3']))
    number = ''.join(rand_int)
    result = number+temp
    m2 = hashlib.md5()
    m2.update(result)
    user_hash = m2.hexdigest()
    return user_hash

#print user_auth(s1)

def try_int(arg,default):
    try:
        arg = int(arg)
    except Exception as e:
        arg = default
    return arg

def Custompager(baseurl,currentPage,totalpage):  #基础页，当前页，总页数
    perPager=11
    begin=0
    end=0
    if totalpage <= 11:
        begin=0
        end=totalpage
    else:
        if currentPage>5:
            begin=currentPage-5
            end=currentPage+5
            if end > totalpage:
                end=totalpage
        else:
            begin=0
            end=11
    pager_list=[]
    if currentPage<=1:
        first= mark_safe("<a href=''>first</a>")
    else:
        first= mark_safe("<a href='%s%d'>first</a>" % (baseurl,1))
    pager_list.append(first)
 
    if currentPage<=1:
        prev= mark_safe("<a href=''>&laquo;</a>")
    else:
        prev= mark_safe("<a href='%s%d'>&laquo;</a>" % (baseurl,currentPage-1))
    pager_list.append(prev)
 
    for i in range(begin+1,end+1):
        if i == currentPage:
            temp= mark_safe("<a href='%s%d' class='selected'>%d</a>" % (baseurl,i,i))
        else:
            temp= mark_safe("<a href='%s%d'>%d</a>" % (baseurl,i,i))
        pager_list.append(temp)
    if currentPage>=totalpage:
        next= mark_safe("<a href='#'>&raquo;</a>")
    else:
        next= mark_safe("<a href='%s%d'>&raquo;</a>" % (baseurl,currentPage+1))
    pager_list.append(next)
    if currentPage>=totalpage:
        last= mark_safe("<a href=''>end</a>")
    else:
        last= mark_safe("<a href='%s%d'>end</a>" % (baseurl,totalpage))
    pager_list.append(last)
    #result=''.join(pager_list)
        
    return pager_list#mark_safe(pager_list)   #把字符串转成html语言
    



