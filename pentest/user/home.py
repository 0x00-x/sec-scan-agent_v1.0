#!/usr/bin/env python
#coding:utf-8
#__author__:Bing
#email:amazing_bing@outlook.com

from django.shortcuts import render_to_response,HttpResponse,HttpResponseRedirect
from django.views.decorators.csrf import csrf_exempt
from pentest import models
from pentest.common import *
from pentest.forms import *


@auth_required
@csrf_exempt
def user_index(request):
    #models.UserGroup.objects.create(gname="user")
    username = request.COOKIES.get('user_name','')
    ret = {"name":"Guest","status":""}
    ret["name"] = username

    return render_to_response('dashboard.html',ret)
            
            
@auth_required
def user_profile(request):
    userauth = request.COOKIES.get('user_auths','')
    username = request.COOKIES.get('user_name','')
    #UserInfo.objects.filter(permiss_id_gname_contains='S')
    result = models.UserInfo.objects.filter(user_hash=userauth)
    ret = result.values()[0]
    result1 = models.UserGroup.objects.get(id=ret["permiss_id"])
    ret['privilege'] = result1.gname
    ret['name'] = username
    return render_to_response('user/profile_index.html',ret)

@auth_required
def user_log(request,page):
    currentPage = try_int(page, 1)
    per_item = 5
    userauth = request.COOKIES.get('user_auths','')
    username = request.COOKIES.get('user_name','')
    start = (currentPage-1)*per_item
    end = currentPage*per_item
    #UserInfo.objects.filter(permiss_id_gname_contains='S')
    count = models.UserLogin.objects.filter(login_name__user_hash=userauth).count()
    temp = divmod(count, per_item)
    if temp[1] == 0:
        all_page_count = temp[0]
    else:
        all_page_count = temp[0]+1
    result = models.UserLogin.objects.filter(login_name__user_hash=userauth)[start:end]
    pagination = Custompager('/user/log/', currentPage, all_page_count)

    return render_to_response('user/log.html',{'count':count,'page':pagination,'data':result,'name':username})

@auth_required
@csrf_exempt
def user_modify(request):
    username = request.COOKIES.get('user_name','')
    Password = request.POST.get('pwd','')
    Password1 = request.POST.get('password1','')
    user_auths = request.COOKIES.get('user_auths','')
    obj_M = ResetPwd()
    retM = {'dataM':None,'errorM':''}
    retM['dataM'] = obj_M
    if request.method == 'POST':
        key = 48
        checkform = ResetPwd(request.POST)
        checkresult = checkform.is_valid()
        if checkresult:
            user = models.UserInfo.objects.filter(password__exact=encrypt(key, Password))
            if user:
                result = models.UserInfo.objects.filter(user_hash=user_auths).update(password=encrypt(key, Password1))
                if result:
                    retM['errorM'] = "更新成功!"
            else:
                retM['errorM'] = "旧密码错误!"
        else:
            errorMsg = checkform.errors
            firstErrorMsg = checkform.errors.as_data().values()[0][0].messages[0]
            retM['errorM'] = firstErrorMsg
    return render_to_response('user/modify.html', {'dataM':retM['dataM'],'name':username,'errorM':retM['errorM']})

@auth_required
def user_del(request):
    if request.method == 'GET':
        userauth = request.COOKIES.get('user_auths','')
        ids = request.GET.getlist('id')
        if ids != '':
            idstring = ','.join(ids)
            temp = idstring[0:-1]
            try:
                #result = models.UserLogin.objects.filter(login_name__user_hash=userauth)
                models.UserLogin.objects.extra(where=['id IN ('+temp+')']).delete()
                response = HttpResponseRedirect("/user/log/1/")
                return response
            except Exception as e:
                response = HttpResponseRedirect("/user/log/1/")
                return response
        else:
            response = HttpResponseRedirect("/user/log/1/")
            return response
        
    else:
        response = HttpResponseRedirect("user/log/1/")
    return response