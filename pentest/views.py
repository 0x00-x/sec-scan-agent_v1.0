#!/usr/bin/env python
#coding:utf-8
#__author__:Bing
#email:amazing_bing@outlook.com

from django.shortcuts import render_to_response,HttpResponse,HttpResponseRedirect,Http404
from pentest.forms import *
from pentest.common import *
from pentest import models
from django.views.decorators.csrf import csrf_exempt
import time

# Create your views here.
@csrf_exempt
def login(request):
    auth_user = request.COOKIES.get('user_auths','')
    if auth_user != '':
        return HttpResponseRedirect("/index/")
    obj_L = LoginForm()
    retL = {'dataL':None,'errorL':''}
    retL['dataL'] = obj_L
    if request.method == 'POST':
        checkform = LoginForm(request.POST)
        checkresult = checkform.is_valid()
        if checkresult:
            key = 48
            loginip = request.META['REMOTE_ADDR']
            loginagent = request.META['HTTP_USER_AGENT']
            logindate = str(time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
            Username = request.POST.get('username','')
            Password = request.POST.get('password','')
            user = models.UserInfo.objects.filter(username__exact=Username,password__exact=encrypt(key, Password))
            if user:
                U = models.UserInfo.objects.filter(username=Username)
                for item in U:
                    value = item.password
                #日志记录部分没写
                #result = models.UserLogin(login_date = login_date,login_ip = Login_ip,login_agent = Login_agent,login_name = U)
                #result.save()
                T = models.UserInfo.objects.get(username=Username)
                models.UserLogin.objects.create(login_name=T,login_agent=loginagent,login_ip=loginip,login_date=logindate)
                user_hashs = user_auth(value)
                response = HttpResponseRedirect("/index/")
                response.set_cookie('user_name',Username,3600)
                response.set_cookie('user_auths',user_hashs,3600,None,path='/',domain=None,secure=None,httponly=True)
                models.UserInfo.objects.update(user_hash=user_hashs)
                return response
            else:
                #raise Http404("make set cookie fail")
                return HttpResponseRedirect("/")
        else:
            errorMsg = checkform.errors
            firstErrorMsg = checkform.errors.as_data().values()[0][0].messages[0]
            retL['errorL'] = firstErrorMsg
            #return HttpResponseRedirect("/register/")
            
    return render_to_response('user/login_index.html', retL)

@csrf_exempt
def register(request):
    obj_R = RegisterForm()
    retR = {'dataR':None,'errorR':''}
    retR['dataR'] = obj_R
    if request.method == 'POST':
        checkform = RegisterForm(request.POST)
        checkresult = checkform.is_valid()
        if checkresult:
            Addr = request.META['REMOTE_ADDR']
            Agent = request.META['HTTP_USER_AGENT']
            Register_date = str(time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
            
            #print request.POST
            Username = request.POST.get('username','')
            Password = request.POST.get('password','')
            Email = request.POST.get('email','')
            Phone = request.POST.get('phone','')
            
            G = models.UserGroup.objects.get(gname="user")
            key = 48
            result = models.UserInfo.objects.create(username = Username,password = encrypt(key, Password),email = Email,phone = Phone,ip = Addr,agent = Agent,register_date = Register_date,permiss = G )
            if result:
                return HttpResponseRedirect('/')
            else:
                raise Http404("Register is fail")
        else:
            errorMsg = checkform.errors
            firstErrorMsg = checkform.errors.as_data().values()[0][0].messages[0]
            retR['errorR'] = firstErrorMsg
    return render_to_response('user/register_index.html', retR)
            
def user_logout(request):
    response = HttpResponse("<meta http-equiv='Refresh' content='3;url=/' />User quit is successful,Page is jumping...please waiting for three seconds ")
    response.delete_cookie('user_auths')
    response.delete_cookie('user_name')
    return response
            
    





